{"version":3,"sources":["logo.svg","pages/dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dashboard","onChanged","e","index","target","name","value","list","state","inputList","setState","console","log","categories","title","composer","verses","uchb","audio","category","display","_display","cat","btn1","btn2","catName","catDesc","shortCode","fetched","verse","fetchCategories","bind","onVersesValueChanged","onTitleValueChanged","onComposerValueChanged","onUchbValueChanged","onCategoriesChanged","sendToServer","onCatNameChanged","onCatDescChanged","onShortCodeChanged","sendToCatServer","fetchLibrary","getCategoryNameFromId","this","arr","push","myHeaders","Headers","append","fetch","method","headers","redirect","then","response","text","result","results","JSON","parse","catch","error","Axios","get","data","post","id","_","findIndex","className","Row","Col","md","style","backgroundColor","height","position","color","fontWeight","fontSize","width","marginTop","Button","disabled","onClick","right","textAlign","Alert","Form","FormGroup","Input","type","placeholder","onChange","map","objectId","item","i","key","sm","float","Table","hover","scope","row","short_code","description","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.882de1c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { Container, Row, Col, Button, Form, FormGroup, Label, Input, FormText, Card, Alert, Table } from \"reactstrap\";\nimport Constants from \"../constants/constants\";\nimport _ from \"lodash\";\nimport Axios from \"axios\";\n\n\nexport default class Dashboard extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            categories: [],\n            title: \"\",\n            composer: \"\",\n            value: \"\",\n            verses: [],\n            uchb: 0,\n            audio: \"\",\n            category: \"\",\n            display: false,\n            _display: false,\n            cat: true,\n            btn1: true,\n            btn2: false,\n            catName: \"\",\n            catDesc: \"\",\n            shortCode: \"\",\n            fetched: [],\n            inputList: [\n                {\n                    verse: \"\",\n                }\n            ]\n        };\n        this.fetchCategories = this.fetchCategories.bind(this);\n        this.onVersesValueChanged = this.onVersesValueChanged.bind(this);\n        this.onTitleValueChanged = this.onTitleValueChanged.bind(this);\n        this.onComposerValueChanged = this.onComposerValueChanged.bind(this);\n        this.onUchbValueChanged = this.onUchbValueChanged.bind(this);\n        this.onCategoriesChanged = this.onCategoriesChanged.bind(this);\n        this.sendToServer = this.sendToServer.bind(this);\n        this.onCatNameChanged = this.onCatNameChanged.bind(this);\n        this.onCatDescChanged = this.onCatDescChanged.bind(this);\n        this.onShortCodeChanged = this.onShortCodeChanged.bind(this);\n        this.sendToCatServer = this.sendToCatServer.bind(this);\n        this.fetchLibrary = this.fetchLibrary.bind(this);\n        this.getCategoryNameFromId = this.getCategoryNameFromId.bind(this);\n        this.onChanged = this.onChanged.bind(this);\n    }\n\n    onTitleValueChanged(e) {\n        console.log(e.target.value);\n        this.setState({\n            title: e.target.value\n        });\n    }\n\n    onComposerValueChanged(e) {\n        console.log(e.target.value);\n        this.setState({\n            composer: e.target.value\n        });\n    }\n\n    onUchbValueChanged(e) {\n        console.log(e.target.value);\n        this.setState({\n            uchb: e.target.value\n        });\n    }\n\n    onVersesValueChanged(e) {\n        let arr = [];\n        arr.push(e.target.value);\n        this.setState({\n            verses: arr\n        }, () => {\n            console.log(this.state.verses);\n        });\n    }\n\n    onCategoriesChanged(e) {\n        console.log(e.target.value);\n        this.setState({\n            category: e.target.value\n        })\n    }\n\n    onCatNameChanged(e) {\n        console.log(e.target.value);\n        this.setState({\n            catName: e.target.value\n        })\n    }\n\n    onCatDescChanged(e) {\n        console.log(e.target.value);\n        this.setState({\n            catDesc: e.target.value\n        })\n    }\n\n    onShortCodeChanged(e) {\n        console.log(e.target.value);\n        this.setState({\n            shortCode: e.target.value\n        })\n    }\n\n    onChanged = (e, index) => {\n        const { name, value } = e.target;\n\n        const list = [...this.state.inputList];\n        list[index][name] = value;\n        this.setState({\n            list\n        }, () => {\n            console.log(list)\n        })\n    }\n\n\n\n    fetchCategories() {\n        var myHeaders = new Headers();\n        myHeaders.append(\"X-Parse-Application-Id\", \"wu0PXewUw6fc67fu3YWt8Kk6u5dovykG9Itz3lwb\");\n        myHeaders.append(\"X-Parse-REST-API-Key\", \"qQpgXE0wfkugEntT7CY44B6neifJ4rGO10bGMfnr\");\n\n        var raw = \"\";\n\n        var requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        fetch(\"https://parseapi.back4app.com/classes/category\", requestOptions)\n            .then(response => response.text())\n            .then(result => {\n                let results = JSON.parse(result);\n                this.setState({\n                    categories: results.results\n                }, () => {\n                    console.log(this.state.categories)\n                })\n            })\n            .catch(error => console.log('error', error)\n            );\n    }\n\n    fetchLibrary() {\n        let headers = {\n            \"X-Parse-Application-Id\": \"wu0PXewUw6fc67fu3YWt8Kk6u5dovykG9Itz3lwb\",\n            \"X-Parse-REST-API-Key\": \"qQpgXE0wfkugEntT7CY44B6neifJ4rGO10bGMfnr\"\n        };\n\n        Axios.get(\"https://parseapi.back4app.com/classes/library\",\n            {\n                headers: headers\n            }\n        ).then((response) => {\n            console.log(response.data.results);\n            if (response) {\n                this.setState({\n                    fetched: response.data.results\n                });\n            }\n        })\n    }\n\n    sendToServer() {\n        let headers = {\n            \"X-Parse-Application-Id\": \"wu0PXewUw6fc67fu3YWt8Kk6u5dovykG9Itz3lwb\",\n            \"X-Parse-REST-API-Key\": \"qQpgXE0wfkugEntT7CY44B6neifJ4rGO10bGMfnr\"\n        };\n\n        Axios.post(\"https://parseapi.back4app.com/classes/library\",\n            {\n                \"verses\": this.state.list,\n                \"title\": this.state.title,\n                \"category\": this.state.category,\n                \"composer\": this.state.composer,\n                \"uchb\": this.state.uchb,\n                \"audio\": this.state.audio\n            },\n            {\n                headers: headers\n            }\n        ).then((response) => {\n            if (response) {\n                this.fetchLibrary();\n                this.setState({\n                    display: true,\n                    verses: [],\n                    title: \"\",\n                    category: \"\",\n                    composer: \"\",\n                    uchb: \"\",\n                    audio: \"\"\n                });\n            }\n        })\n    }\n\n    sendToCatServer() {\n        let headers = {\n            \"X-Parse-Application-Id\": \"wu0PXewUw6fc67fu3YWt8Kk6u5dovykG9Itz3lwb\",\n            \"X-Parse-REST-API-Key\": \"qQpgXE0wfkugEntT7CY44B6neifJ4rGO10bGMfnr\"\n        };\n\n        Axios.post(\"https://parseapi.back4app.com/classes/category\",\n            {\n                \"category\": this.state.catName,\n                \"short_code\": this.state.shortCode,\n                \"description\": this.state.catDesc,\n            },\n            {\n                headers: headers\n            }\n        ).then((response) => {\n            if (response) {\n                this.setState({\n                    _display: true,\n                    catName: \"\",\n                    catDesc: \"\",\n                    shortCode: \"\"\n                });\n            }\n        })\n    }\n\n    getCategoryNameFromId(id) {\n        console.log(id);\n        let value = _.findIndex(this.state.categories, { 'objectId': id });\n        return value;\n    }\n\n    componentDidMount() {\n        this.fetchCategories();\n        this.fetchLibrary();\n    }\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <Row>\n                    <Col md={4} style={{ backgroundColor: \"#e222e2\", height: \"100vh\", position: \"fixed\" }}>\n                        <div className=\"p-4\" style={{ color: \"white\", fontWeight: \"bolder\", fontSize: \"2em\" }}>\n                            Urhobo Catholic Hymnal\n                        </div>\n                        <div style={{ width: \"100%\", marginTop: \"200px\" }}>\n                            <div>\n                                <Button disabled={this.state.btn1} style={{ width: \"100%\" }} onClick={() => {\n                                    this.setState({\n                                        cat: this.state.cat ? false : true,\n                                        btn1: true,\n                                        btn2: false\n                                    });\n                                }} >\n                                    Hymns\n                                </Button>\n                            </div>\n                            <div>\n                                <Button disabled={this.state.btn2} style={{ width: \"100%\" }} onClick={() => {\n                                    this.setState({\n                                        cat: this.state.cat ? false : true,\n                                        btn1: false,\n                                        btn2: true\n                                    });\n                                }}>\n                                    Categories\n                                </Button>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col md={8} style={{ position: \"absolute\", right: \"0\" }}>\n                        {\n                            this.state.cat ?\n                                <div>\n                                    <div className=\"p-4\" style={{ height: \"60px\", textAlign: \"left\", fontSize: \"1.5em\" }}>\n                                        Hymns\n                                </div>\n                                    {\n                                        this.state.display &&\n                                        <Alert className=\"success\">\n                                            Data uploaded successfully to the server\n                                    </Alert>\n                                    }\n                                    <Form style={{ marginTop: \"30px\" }}>\n                                        <FormGroup>\n                                            <Input type=\"text\" name=\"title\" id=\"title\" placeholder=\"Song Title\" value={this.state.title} onChange={this.onTitleValueChanged} />\n                                        </FormGroup>\n                                        <FormGroup>\n                                            <Input type=\"text\" name=\"composer\" id=\"composer\" placeholder=\"Composer\" value={this.state.composer} onChange={this.onComposerValueChanged} />\n                                        </FormGroup>\n                                        <FormGroup>\n                                            <Input type=\"number\" name=\"email\" id=\"uchb\" placeholder=\"UCHB number\" value={this.state.uchb} onChange={this.onUchbValueChanged} />\n                                        </FormGroup>\n                                        <FormGroup>\n                                            <Input type=\"select\" name=\"select\" id=\"exampleSelect\" onChange={this.onCategoriesChanged}>\n                                                <option value=\"\">Choose category</option>\n                                                {\n                                                    this.state.categories.map((e) => {\n                                                        return <option value={e.objectId} > {e.category} </option>\n                                                    })\n                                                }\n                                            </Input>\n                                        </FormGroup>\n                                        {/* <FormGroup row> */}\n                                        {\n                                            this.state.inputList.map((item, i) => {\n                                                return (\n                                                    <div className=\"row mt-3\" key={i}>\n                                                        <Col sm={10}>\n                                                            <Input type=\"textarea\" name=\"verse\" id=\"text\" placeholder=\"Verses\" onChange={e => this.onChanged(e, i)} />\n                                                        </Col>\n                                                        <Col sm={2}>\n                                                            <Button title=\"Add more verses\" onClick={\n                                                                () => {\n                                                                    this.setState({\n                                                                        inputList: [...this.state.inputList, { verse: \"\" }]\n                                                                    })\n                                                                }\n                                                            }><i className=\"fa fa-plus\"></i></Button>\n                                                        </Col>\n                                                    </div>\n                                                );\n                                            })\n                                        }\n                                        {/* </FormGroup> */}\n                                        <Button onClick={this.sendToServer} style={{ float: \"right\" }}>Submit</Button>\n                                    </Form>\n                                    <div>\n                                        <Table hover>\n                                            <thead>\n                                                <tr>\n                                                    <th>UCHB</th>\n                                                    <th>Title</th>\n                                                    <th>Composer</th>\n                                                    <th>Category</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {\n                                                    this.state.fetched.map(value => {\n                                                        return <tr>\n                                                            <th scope=\"row\">{value.uchb}</th>\n                                                            <td>{value.title}</td>\n                                                            <td>{value.composer}</td>\n                                                            <td>{this.state.categories[this.getCategoryNameFromId(value.category)].category}</td>\n                                                        </tr>\n                                                    })\n                                                }\n                                            </tbody>\n                                        </Table>\n                                    </div>\n                                </div>\n                                :\n                                <div>\n                                    <div className=\"p-4\" style={{ height: \"60px\", textAlign: \"left\", fontSize: \"1.5em\" }}>\n                                        Categories\n                                </div>\n                                    {\n                                        this.state._display &&\n                                        <Alert className=\"success\">\n                                            Data uploaded category successfully to the server\n                                    </Alert>\n                                    }\n                                    <Form style={{ marginTop: \"50px\" }}>\n                                        <FormGroup>\n                                            <Input type=\"text\" placeholder=\"Category Title\" value={this.state.catName} onChange={this.onCatNameChanged} />\n                                        </FormGroup>\n                                        <FormGroup>\n                                            <Input type=\"text\" placeholder=\"Category Short Code E.g (ENT) for Entrance\" value={this.state.shortCode} onChange={this.onShortCodeChanged} />\n                                        </FormGroup>\n                                        <FormGroup row>\n                                            <Col sm={12}>\n                                                <Input type=\"textarea\" id=\"text\" placeholder=\"Category Description\" value={this.state.catDesc} onChange={this.onCatDescChanged} />\n                                            </Col>\n                                        </FormGroup>\n                                        <Button onClick={this.sendToCatServer}>Submit</Button>\n                                    </Form>\n                                    <div>\n                                        <Table hover>\n                                            <thead>\n                                                <tr>\n                                                    <th>Short Code</th>\n                                                    <th>Category</th>\n                                                    <th>Description</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {\n                                                    this.state.categories.map(value => {\n                                                        return <tr>\n                                                            <th scope=\"row\">{value.short_code}</th>\n                                                            <td>{value.category}</td>\n                                                            <td>{value.description}</td>\n                                                        </tr>\n                                                    })\n                                                }\n                                            </tbody>\n                                        </Table>\n                                    </div>\n                                </div>\n                        }\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Container, Row, Col } from 'reactstrap';\nimport Dashboard from \"./pages/dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}