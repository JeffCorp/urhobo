{"version":3,"sources":["logo.svg","pages/dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dashboard","state","categories","title","composer","value","verses","uchb","audio","category","display","fetchCategories","bind","onVersesValueChanged","onTitleValueChanged","onComposerValueChanged","onUchbValueChanged","onCategoriesChanged","sendToServer","e","console","log","target","this","setState","arr","push","myHeaders","Headers","append","fetch","method","headers","redirect","then","response","text","result","results","JSON","parse","catch","error","Axios","post","className","Row","Col","md","style","backgroundColor","height","color","fontWeight","fontSize","width","marginTop","Button","textAlign","Alert","Form","FormGroup","Input","type","name","id","placeholder","onChange","map","objectId","row","sm","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.095ea3ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { Container, Row, Col, Button, Form, FormGroup, Label, Input, FormText, Card, Alert } from \"reactstrap\";\nimport Constants from \"../constants/constants\";\nimport Axios from \"axios\";\n\n\nexport default class Dashboard extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            categories: [],\n            title: \"\",\n            composer: \"\",\n            value: \"\",\n            verses: [],\n            uchb: 0,\n            audio: \"\",\n            category: \"\",\n            display: false\n        };\n        this.fetchCategories = this.fetchCategories.bind(this);\n        this.onVersesValueChanged = this.onVersesValueChanged.bind(this);\n        this.onTitleValueChanged = this.onTitleValueChanged.bind(this);\n        this.onComposerValueChanged = this.onComposerValueChanged.bind(this);\n        this.onUchbValueChanged = this.onUchbValueChanged.bind(this);\n        this.onCategoriesChanged = this.onCategoriesChanged.bind(this);\n        this.sendToServer = this.sendToServer.bind(this);\n    }\n\n    onTitleValueChanged(e){\n        console.log(e.target.value);\n        this.setState({\n            title: e.target.value\n        });\n    }\n\n    onComposerValueChanged(e){\n        console.log(e.target.value);\n        this.setState({\n            composer: e.target.value\n        });\n    }\n\n    onUchbValueChanged(e){\n        console.log(e.target.value);\n        this.setState({\n            uchb: e.target.value\n        });\n    }\n\n    onVersesValueChanged(e){\n        let arr = [];\n        arr.push(e.target.value);\n        this.setState({\n            verses : arr\n        }, () => {\n            console.log(this.state.verses);\n        });\n    }\n\n    onCategoriesChanged(e){\n        console.log(e.target.value);\n        this.setState({\n            category: e.target.value\n        })\n    }\n\n    fetchCategories() {\n        var myHeaders = new Headers();\n        myHeaders.append(\"X-Parse-Application-Id\", \"wu0PXewUw6fc67fu3YWt8Kk6u5dovykG9Itz3lwb\");\n        myHeaders.append(\"X-Parse-REST-API-Key\", \"qQpgXE0wfkugEntT7CY44B6neifJ4rGO10bGMfnr\");\n\n        var raw = \"\";\n\n        var requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        fetch(\"https://parseapi.back4app.com/classes/category\", requestOptions)\n            .then(response => response.text())\n            .then(result => {\n                let results = JSON.parse(result);\n                this.setState({\n                    categories: results.results\n                }, () => {\n                    console.log(this.state.categories)\n                })\n            })\n            .catch(error => console.log('error', error)\n        );\n    }\n\n    sendToServer(){\n\n        let headers = {\n            \"X-Parse-Application-Id\": \"wu0PXewUw6fc67fu3YWt8Kk6u5dovykG9Itz3lwb\",\n            \"X-Parse-REST-API-Key\": \"qQpgXE0wfkugEntT7CY44B6neifJ4rGO10bGMfnr\"\n        };\n\n        console.log(this.state.verses);\n\n        Axios.post(\"https://parseapi.back4app.com/classes/library\",\n                {\n                    \"verses\": this.state.verses,\n                    \"title\": this.state.title,\n                    \"category\": this.state.category,\n                    \"composer\": this.state.composer,\n                    \"uchb\": this.state.uchb,\n                    \"audio\": this.state.audio\n                },\n                {\n                    headers: headers\n                }                \n        ).then((response) => {\n            if(response){\n                this.setState({\n                    display: true,\n                    verses: [],\n                    title: \"\",\n                    category: \"\",\n                    composer: \"\",\n                    uchb: \"\",\n                    audio: \"\"\n                });\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.fetchCategories();\n    }\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <Row>\n                    <Col md={4} style={{ backgroundColor: \"#e222e2\", height: \"100vh\" }}>\n                        <div className=\"p-4\" style={{ color: \"white\", fontWeight: \"bolder\", fontSize: \"2em\" }}>\n                            Urhobo Hymnal\n                        </div>\n                        <div style={{ width: \"100%\", marginTop: \"200px\" }}>\n                            <div>\n                                <Button style={{ width: \"100%\" }} >\n                                    Hymns\n                                </Button>\n                            </div>\n                            <div>\n                                Categories\n                            </div>\n                        </div>\n                    </Col>\n                    <Col md={8}>\n                        <div>\n                            <div className=\"p-4\" style={{ height: \"60px\", textAlign: \"left\", fontSize: \"1.5em\" }}>\n                                Hymns\n                            </div>\n                            {\n                                this.state.display &&\n                                <Alert className=\"success\">\n                                    Data uploaded successfully to the server\n                                </Alert>\n                            }\n                            <Form style={{ marginTop: \"50px\" }}>\n                                <FormGroup>\n                                    <Input type=\"text\" name=\"email\" id=\"title\" placeholder=\"Song Title\" value={this.state.title} onChange={this.onTitleValueChanged} />\n                                </FormGroup>\n                                <FormGroup>\n                                    <Input type=\"text\" name=\"email\" id=\"composer\" placeholder=\"Composer\" value={this.state.composer} onChange={this.onComposerValueChanged} />\n                                </FormGroup>\n                                <FormGroup>\n                                    <Input type=\"number\" name=\"email\" id=\"uchb\" placeholder=\"UCHB number\" value={this.state.uchb} onChange={this.onUchbValueChanged} />\n                                </FormGroup>\n                                <FormGroup>\n                                    <Input type=\"select\" name=\"select\" id=\"exampleSelect\" onChange={this.onCategoriesChanged}>\n                                        <option value=\"\">Choose category</option>\n                                        {\n                                            this.state.categories.map((e) => {\n                                                return <option value={e.objectId} > {e.category} </option>\n                                            })\n                                        }\n                                    </Input>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Col sm={12}>\n                                        <Input type=\"textarea\" name=\"text\" id=\"text\" placeholder=\"Verses\" value={this.state.verses} onChange={this.onVersesValueChanged} />\n                                    </Col>\n                                </FormGroup>\n                                <Button onClick={this.sendToServer}>Submit</Button>\n                            </Form>\n                        </div>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Container, Row, Col } from 'reactstrap';\nimport Dashboard from \"./pages/dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}